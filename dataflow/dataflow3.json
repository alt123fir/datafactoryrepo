{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSemptable",
						"type": "DatasetReference"
					},
					"name": "employees"
				},
				{
					"dataset": {
						"referenceName": "Azuredepttable",
						"type": "DatasetReference"
					},
					"name": "department"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "adlsfinancedataset",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPLOYEE_ID as decimal(6,0),",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as timestamp,",
				"          JOB_ID as string,",
				"          SALARY as decimal(8,2),",
				"          COMMISSION_PCT as decimal(2,2),",
				"          MANAGER_ID as decimal(6,0),",
				"          DEPARTMENT_ID as decimal(4,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> employees",
				"source(output(",
				"          department_id as integer,",
				"          department_name as string,",
				"          manager_id as integer,",
				"          location_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> department",
				"join1 filter(SALARY>6000) ~> filter1",
				"derivedColumn1 aggregate(groupBy(department_name),",
				"     EMPLOYEE_ID = count()) ~> aggregate1",
				"filter1 cast(output(",
				"          EMPLOYEE_ID as integer,",
				"          COMMISSION_PCT as string,",
				"          MANAGER_ID as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 derive(MANAGER_ID = iifNull(cast1@MANAGER_ID, 0, cast1@MANAGER_ID),",
				"          COMMISSION_PCT = iifNull(COMMISSION_PCT, 'UNKNOWN', COMMISSION_PCT),",
				"          FULL_NAME = concat(FIRST_NAME, LAST_NAME)) ~> derivedColumn1",
				"employees, department join(employees@DEPARTMENT_ID == department@department_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          description as string,",
				"          industry as string,",
				"          level as string,",
				"          size as string,",
				"          line_code as string,",
				"          value as string",
				"     ),",
				"     partitionFileNames:['outputdataflow3.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}